if(output[i]==max(output) || output[i]== sort(output, decreasing = TRUE)[2]){
output[i] = output [i]}
else{
output[i] = 0}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, maximafunction), row.names = fractionnames)
allmaxima_RNase = data.frame(apply(tRNase_Norm, 2, maximafunction), row.names = fractionnames )
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(heatmaply)
library(scales)
library(gganimate)
library(dplyr) ##for the select function
library(tibble)
library(ggiraph)
library(ggiraphExtra)
library(ggplot2)
library(qqplotr)
#loading "RDeeP_A549_NS.csv" into Data.raw dataframe
#MS_Table <- read.table("~/Desktop/2022-topic-03-team-04/RDeeP_A549_NS.csv", header=TRUE, row.names=1, sep = ";")
Data.raw <- read.table("C:/Users/Archid Knighton/Documents/GitHub/2022-topic-03-team-04/RDeeP_A549_NS.csv", header=TRUE, row.names=1, sep = ";")
#creating a copy of Data.raw and saving it as Data.copy
Data.copy = Data.raw
head(Data.copy)
dim(Data.copy)
# the dataset has 150 columns and 3680 rows
# restruction needed
# we want to restructure the dataset by fractions and divide it in two datasets, one for RNAse and one for Ctrl
# we need to write a function that restructures the dataset
## Therefor we pick by repetitions and create Rep1, Rep2 and Rep3 vectors:starting with 1(Ctrl) or with 2(RNase)
## every six columns there is a new fraction
restructure_func = function(input_df,start){ #start = 1 for Ctrl and start = 2 for RNase.
Vector.Rep1 <- c(seq(from =start, to = 150, by = 6)) # by 6 to reach the next fraction
Vector.Rep2 <- c(seq(from =start+2, to = 150, by = 6))
Vector.Rep3 <- c(seq(from =start+4, to = 150, by = 6))
output_df = as.data.frame(matrix(nrow = 3*3680, ncol=25))
#Naming the fractions
for (i in 1:25) {
s = paste("Fraction",i,sep="_")
colnames(output_df)[i] = s
}
#Assignment of values and row names
k = 1 #Row number of the old dataframe
i = 1 #Row number of the new dataframe
while (i <= dim(output_df)[1]) { # All Rows of the new dataframes will be selected
output_df[i,] = input_df[k,Vector.Rep1] #The values of Rep 1 are assigned to the row
row.names(output_df)[i] = paste(rownames(input_df)[k],"Rep",1,sep="_") #The row is given a name of Protein_Rep_1
i = i + 1
output_df[i,] = input_df[k,Vector.Rep2] # Repeat for Rep 2
row.names(output_df)[i] = paste(rownames(input_df)[k],"Rep",2,sep="_")
i = i + 1
output_df[i,] = input_df[k,Vector.Rep3] # Repeat for Rep 3
row.names(output_df)[i] = paste(rownames(input_df)[k],"Rep",3,sep="_")
i = i + 1
k = k + 1 # The row of the old dataframe is advanced by 1
}
return(output_df)
}
Ctrl = restructure_func(Data.copy,1)
RNase = restructure_func(Data.copy,2)
Ctrl = t(Ctrl)
Ctrl = data.frame(Ctrl) ## In order to be able to use the select function
RNase = t(RNase)
RNase = data.frame(RNase)
Fractions = c(1:25)
SPB6_Human_Protein_Ctrl = ggplot() +
geom_line(data = select(Ctrl,1),  aes(x = Fractions, y = SPB6_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl,2),  aes(x = Fractions, y = SPB6_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl,3),  aes(x = Fractions, y = SPB6_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="cyan3", Ctrl_Rep3="violetred4")) +
labs(title="SPB6_HUMAN_Ctrl", y= "Protein Amount")
SPB6_Human_Protein_Ctrl + scale_x_continuous(breaks = seq(1, 25, by = 1))
SPB6_Human_Protein_RNase = ggplot() +
geom_line(data = select(RNase,1),  aes(x = Fractions, y = SPB6_HUMAN_Rep_1 , color= 'RNase_Rep1')) +
geom_line(data = select(RNase,2), aes(x = Fractions, y = SPB6_HUMAN_Rep_2, color= 'RNase_Rep2')) +
geom_line(data = select(RNase,3), aes(x = Fractions, y = SPB6_HUMAN_Rep_3, color= 'RNase_Rep3')) +
scale_colour_manual(name="legend",values=c(RNase_Rep1="blue2",RNase_Rep2="cyan3", RNase_Rep3= "violetred4")) +
labs(title="SPB6_HUMAN_RNase", y= "Protein Amount")
SPB6_Human_Protein_RNase + scale_x_continuous(breaks = seq(1, 25, by = 1))
SPB6_Human_Protein = ggplot() +
geom_line(data = select(Ctrl,1),  aes(x = Fractions, y = SPB6_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl,2),  aes(x = Fractions, y = SPB6_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl,3),  aes(x = Fractions, y = SPB6_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
geom_line(data = select(RNase,1),  aes(x = Fractions, y = SPB6_HUMAN_Rep_1 , color= 'RNase_Rep1')) +
geom_line(data = select(RNase,2), aes(x = Fractions, y = SPB6_HUMAN_Rep_2, color= 'RNase_Rep2')) +
geom_line(data = select(RNase,3), aes(x = Fractions, y = SPB6_HUMAN_Rep_3 , color= 'RNase_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",RNase_Rep1="cyan3", Ctrl_Rep2="violetred4", RNase_Rep2="tomato1",Ctrl_Rep3="darkviolet", RNase_Rep3="pink")) +
labs(title="SPB6_HUMAN", y= "Protein Amount")
SPB6_Human_Protein + scale_x_continuous(breaks = seq(1, 25, by = 1))
# RNA associates with proteins to form RNA-Protein complexes that play key regulatory roles in cellular processes --> RNA metabolism and the regulation of gene expression
# concept of RNA dependence (R-DeeP) describes proteins and protein complexes whose interactions are directly or indirectly dependent on the presence of RNA
# aim: identify RNA-dependent proteins from the position of the proteins in an untreated cell lysate as t
Fractions = c(1:25)
MICA_HUMAN_Protein  = ggplot() +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2, color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
geom_line(data = select(RNase, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1 , color= 'RNase_Rep1')) +
geom_line(data = select(RNase, contains("MICA_HUMAN_Rep_2")), aes(x = Fractions, y = MICA_HUMAN_Rep_2, color= 'RNase_Rep2')) +
geom_line(data = select(RNase, contains("MICA_HUMAN_Rep_3")), aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'RNase_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",RNase_Rep1="green4", Ctrl_Rep2="magenta1", RNase_Rep2="tomato1",Ctrl_Rep3="darkviolet", RNase_Rep3="turquoise4")) +
labs(title="MICA_HUMAN_Protein", y= "Protein Amount")
MICA_HUMAN_Protein + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_HUMAN_Protein_Ctrl = ggplot() +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_Human_Protein_RNase = ggplot() +
geom_line(data = select(RNase, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1 , color= 'RNase_Rep1')) +
geom_line(data = select(RNase,contains("MICA_HUMAN_Rep_2")), aes(x = Fractions, y = MICA_HUMAN_Rep_2, color= 'RNase_Rep2')) +
geom_line(data = select(RNase,contains("MICA_HUMAN_Rep_3")), aes(x = Fractions, y = MICA_HUMAN_Rep_3, color= 'RNase_Rep3')) +
scale_colour_manual(name="legend",values=c(RNase_Rep1="blue2",RNase_Rep2="green4", RNase_Rep3= "magenta1")) +
labs(title="MICA_HUMAN_RNase", y= "Protein Amount")
MICA_Human_Protein_RNase + scale_x_continuous(breaks = seq(1, 25, by = 1))
Rep_1_Ctrl <- Ctrl %>% select(contains("Rep_1"))
Rep_1_Ctrl_sums = colSums(Rep_1_Ctrl)
Rep_2_Ctrl <- Ctrl %>% select(contains("Rep_2"))
Rep_2_Ctrl_sums = colSums(Rep_2_Ctrl)
Rep_3_Ctrl <- Ctrl %>% select(contains("Rep_3"))
Rep_3_Ctrl_sums = colSums(Rep_3_Ctrl)
Rep_1_RNase <- RNase %>% select(contains("Rep_1"))
Rep_1_RNase_sums = colSums(Rep_1_RNase)
Rep_2_RNase <- RNase %>% select(contains("Rep_2"))
Rep_2_RNase_sums = colSums(Rep_2_RNase)
Rep_3_RNase <- RNase %>% select(contains("Rep_3"))
Rep_3_RNase_sums = colSums(Rep_3_RNase)
Ctrl_sums = cbind(Rep_1_Ctrl_sums, Rep_2_Ctrl_sums, Rep_3_Ctrl_sums)
RNase_sums = cbind(Rep_1_RNase_sums, Rep_2_RNase_sums, Rep_3_RNase_sums)
Ctrl_RNase_sums = cbind(Ctrl_sums, RNase_sums)
Total_Protein_amount = colSums(Ctrl_RNase_sums)
Total_Protein_amount
value = Total_Protein_amount
plotdata = data.frame(value, names=c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata, aes(x = names, y = value)) + geom_bar(stat = "identity")
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
barplot(Total_Protein_amount_norm)
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
RNase_Data_norm
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
Ctrl_Data_norm
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
#aim is to eliminate outliers in our dataset, we try to create our own function
anti_outlier_function<- function(input){
#creating the new df
new_df_anti_outliers<- as.data.frame(matrix(nrow = (dim(input)[1]/3), ncol = dim(input)[2]))
rownames(new_df_anti_outliers) <- rownames(Data.copy)
colnames(new_df_anti_outliers) <- colnames(RNase_Data_norm)
r<- 1   #r are the rows
while (r <= dim(input)[1]) {
for (c in 1:dim(input)[2]) {    #c are the columns
rep1 <- input[r,c]
rep2 <- input[r+1,c]
rep3 <- input[r+2,c]
if( (abs(rep1-rep2)<abs(rep1-rep3)) && (abs(rep1-rep2)<abs(rep2-rep3)) ) {
mean <- mean(c(rep1,rep2))
} else if( (abs(rep1-rep3)<abs(rep1-rep2)) && (abs(rep1-rep3)<abs(rep2-rep3)) ) {
mean <- mean(c(rep1,rep3))
} else {
mean <- mean(c(rep2,rep3))
}
new_df_anti_outliers[(r/3)+1,(c)] <- mean
}
r <- r + 3
}
new_df_anti_outliers = new_df_anti_outliers[-dim(new_df_anti_outliers)[1],]
return(new_df_anti_outliers)
}
Ctrl_anti_outlier_df = anti_outlier_function(Ctrl_Data_norm)
RNase_anti_outlier_df = anti_outlier_function(RNase_Data_norm)
#Data Normalization Z Transformation Method
Data.norm.ctrl.scaled <- as.data.frame(scale(Ctrl[1:11040]))
head(Data.norm.ctrl.scaled)
Data.norm.RNase.scaled <- as.data.frame(scale(RNase[1:11040]))
head(Data.norm.RNase.scaled)
#Data Normalization Z Transformation Method Using Formula
Data.norm.ctrl.z <- as.data.frame(apply(Ctrl,2,function(x){(x-mean(x))/sd(x)}))
head(Data.norm.ctrl.z)
Data.norm.RNase.z <- as.data.frame(apply(RNase,2,function(x){(x-mean(x))/sd(x)}))
head(Data.norm.RNase.z)
#Both results should be the same
Fractions = c(1:25)
SPB6_Human_Protein_Ctrl_norm_z = ggplot() +
geom_line(data = select(Data.norm.ctrl.z,1),  aes(x = Fractions, y = SPB6_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Data.norm.ctrl.z,2),  aes(x = Fractions, y = SPB6_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Data.norm.ctrl.z,3),  aes(x = Fractions, y = SPB6_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="cyan3", Ctrl_Rep3="violetred4")) +
labs(title="SPB6_HUMAN_Ctrl_Normalized_Z", y= "Protein Amount")
SPB6_Human_Protein_Ctrl_norm + scale_x_continuous(breaks = seq(1, 25, by = 1))
# Global and Maxima Detection
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction, 0.5}), row.names = fractionnames)
# Global and Maxima Detection
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction}), row.names = fractionnames)
allmaxima_RNase = data.frame(apply(tRNase_Norm, 2, function(x){maximafunction, 0.5}), row.names = fractionnames )
# Global and Maxima Detection
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction}), row.names = fractionnames)
allmaxima_RNase = data.frame(apply(tRNase_Norm, 2, function(x){maximafunction}), row.names = fractionnames )
# Global and Maxima Detection
maximafunction = function(input){
threshold = 0.5
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction}), row.names = fractionnames)
allmaxima_RNase = data.frame(apply(tRNase_Norm, 2, function(x){maximafunction}), row.names = fractionnames )
# Global and Maxima Detection
maximafunction = function(input){
threshold = 0.5
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, maximafunction), row.names = fractionnames)
allmaxima_RNase = data.frame(apply(tRNase_Norm, 2, maximafunction), row.names = fractionnames )
# Global and Maxima Detection
maximafunction = function(input){
threshold = 0.5
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(ouput)}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(tCtrl_Norm, 2, maximafunction), row.names = fractionnames)
# Global and Maxima Detection
maximafunction = function(input){
threshold = 0.5
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(ouput)}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(t(Ctrl), 2, maximafunction), row.names = fractionnames)
# Global and Maxima Detection
maximafunction = function(input){
threshold = 0.5
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i]<input[i+1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i>1 && i<length(input)){
if(input[i]<input[i+1] && input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i==length(input)){
if(input[i]>input[i-1] && input[i] > threshold*(max(input))){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Results
allmaxima_Ctrl = data.frame(apply(t(Ctrl), 2, maximafunction), row.names = fractionnames)
View(Ctrl_Data_norm)
View(Ctrl_Data_norm)
# Results
allmaxima_Ctrl = data.frame(apply(t(Ctrl_Data_norm), 2, maximafunction), row.names = fractionnames)
View(allmaxima_Ctrl)
View(allmaxima_Ctrl)
