Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
#by Madleen
colour  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(tCtrl_Norm , aes(names, value)) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total Proetin amout norm", x = "Replicates")
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
#by Madleen
colour  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(tRNase_Norm , aes(names, value)) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total Proetin amout norm", x = "Replicates")
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
#by Madleen
colour  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(names, value)) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total Proetin amout norm", x = "Replicates")
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "Before Normalization", y = "protein value", x = "Replicates"
## same concept but in general function
norm_func = function(x) {
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total protein amout", x = "Replicates"
## same concept but in general function
norm_func = function(x) {
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour1  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total protein amout", x = "Replicates"
## same concept but in general function
norm_func = function(x) {
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour1  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization", y = "Total protein amout", x = "Replicates")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour1  = c("hotpink", "orchid3", "skyblue", "pink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization 1", y = "Total protein amout", x = "Replicates")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
ggplot(data = plotdata, aes(x = names , y = value)) + geom_bar(stat = "identity")
#by Madleen
colour  = c("maroon1", "orchid3", "skyblue", "hotpink", "plum1", "skyblue1")
ggplot(plotdata, aes(names, value)) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "Before Normalization", y = "protein value", x = "Replicates")
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour1  = c("maroon1", "orchid3", "skyblue", "hotpink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization 1", y = "Total protein amout", x = "Replicates")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
Rep_1_Ctrl_f = t(Rep_1_Ctrl)
Rep_1_Ctrl_fsums = colSums(Rep_1_Ctrl_f)
Rep_2_Ctrl_f = t(Rep_2_Ctrl)
Rep_2_Ctrl_fsums = colSums(Rep_2_Ctrl_f)
Rep_3_Ctrl_f = t(Rep_3_Ctrl)
Rep_3_Ctrl_fsums = colSums(Rep_3_Ctrl_f)
Rep_1_RNase_f = t(Rep_1_RNase)
Rep_1_RNase_fsums =colSums(Rep_1_RNase_f)
Rep_2_RNase_f = t(Rep_2_RNase)
Rep_2_RNase_fsums = colSums(Rep_2_RNase_f)
Rep_3_RNase_f = t(Rep_3_RNase)
Rep_3_RNase_fsums = colSums(Rep_3_RNase_f)
Total_Protein_by_fractions = cbind(Rep_1_Ctrl_fsums,Rep_2_Ctrl_fsums, Rep_3_Ctrl_fsums, Rep_1_RNase_fsums, Rep_2_RNase_fsums, Rep_3_RNase_fsums)
Total_Protein_norm = t(Total_Protein_by_fractions)/Total_Protein_amount
Total_Protein_norm = as.data.frame(Total_Protein_norm)
Total_Protein_norm
Total_Protein_amount_norm = rowSums(Total_Protein_norm)
Total_Protein_amount_norm
plotdata_norm = data.frame(Total_Protein_amount_norm, Replicates = c("Ctrl1", "Ctrl2", "Ctrl3", "RNase1", "RNase2", "RNase3"))
ggplot(data = plotdata_norm, aes(x = Replicates, y = Total_Protein_amount_norm)) + geom_bar(stat = "identity")
#by Madleen
colour1  = c("maroon1", "orchid3", "skyblue", "hotpink", "plum1", "skyblue1")
ggplot(plotdata_norm, aes(Replicates, Total_Protein_amount_norm )) +
geom_bar(stat = "identity", fill = colour) +
labs( title = "After Normalization 1", y = "Total protein amout", x = "Replicates")
## same concept but in general function
norm_func = function(x) {
x/sum(x)
}
# Applying the normalization to the data
RNase_Data_norm = data.frame(apply(RNase, 1, norm_func))
Ctrl_Data_norm = data.frame(apply(Ctrl, 1, norm_func))
#Remove the NAs that result from some proteins having 0 Protein amount in certain repetitions.
Ctrl_Data_norm[is.na(Ctrl_Data_norm)] <- 0
Ctrl_Data_norm
tCtrl_Norm <- as.data.frame(t(Ctrl_Data_norm))
tCtrl_Norm
RNase_Data_norm[is.na(RNase_Data_norm)] <- 0
RNase_Data_norm
tRNase_Norm <- as.data.frame(t(RNase_Data_norm))
tRNase_Norm
#Normalized
Rep_1_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_1"))
Rep_2_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_2"))
Rep_3_Ctrl_Norm = select(tCtrl_Norm, contains("Rep_3"))
Rep_1_RNase_Norm = select(tRNase_Norm, contains("Rep_1"))
Rep_2_RNase_Norm = select(tRNase_Norm, contains("Rep_2"))
Rep_3_RNase_Norm = select(tRNase_Norm, contains("Rep_3"))
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
Fractions = c(1:25)
MICA_HUMAN_Protein_Ctrl = ggplot() +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_HUMAN_Protein_Ctrl_Norm = ggplot() +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl_Norm", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl_Norm + scale_x_continuous(breaks = seq(1, 25, by = 1))
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_1_Ctrl_Norm, las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_3_Ctrl_Norm), las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_3_Ctrl_Norm), las=2)
#by Madleen
ggplot(data = Rep_1_Ctrl, aes(x = Replicates, y = Total_Protein_amount_norm))
barplot(rowSums(Rep_1_Ctrl_Norm), las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_3_Ctrl_Norm), las=2)
#by Madleen
ggplot(data = Rep_1_Ctrl, aes(x = Fractions, y = Total_Protein_amount_norm))
barplot(rowSums(Rep_1_Ctrl_Norm), las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_3_Ctrl_Norm), las=2)
#by Madleen
ggplot(data = Rep_1_Ctrl, aes(x = Fractions, y = protein menge))
barplot(rowSums(Rep_1_Ctrl_Norm), las=2)
barplot(rowSums(Rep_2_Ctrl_Norm), las=2)
barplot(rowSums(Rep_3_Ctrl_Norm), las=2)
#by Madleen
barplot.default(col = "lightblue")
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = NULL, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = NULL,xlab= Fractions ,ylab = Protein Amount ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = NULL,xlab = "Fractions" , ylab = "Protein Amount" ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = F,xlab = "Fractions" , ylab = "Protein Amount" ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = ,xlab = "Fractions" , ylab = "Protein Amount" ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25) ,xlab = "Fractions" , ylab = "Protein Amount" ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" ,las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" , axes= T, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" , axes= F, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" , axes= T, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" , axes= T,  axisnames=T	, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), space=1,  names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" ,axisnames=T	, las=2)
barplot(rowSums(Rep_1_Ctrl_Norm), space=  names.arg = c(1:25), col= "red" ,xlab = "Fractions" , ylab = "Protein Amount" ,axisnames=T	, las=2)
