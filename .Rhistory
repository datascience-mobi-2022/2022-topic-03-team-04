new_df_combi[r,(c)] <- mean
new_df_combi[r+1,(c)] <- rep2
new_df_combi[r+2,(c)] <- rep3
}
}
r <- r + 3
}
#new_df_combi = new_df_combi[-dim(new_df_combi)[1],]
return(new_df_combi)
}
Ctrl_combi_df = df_combi_function(Ctrl_Data_norm)
RNase_combi_df = df_combi_function(RNase_Data_norm)
Ctrl_combi_df
tCtrl_combi_df = as.data.frame(t(Ctrl_combi_df))
tRNase_combi_df = as.data.frame(t(RNase_combi_df))
# Changed: rows of last 3 loops and adds # to row 462
Fractions = c(1:25)
MICA_HUMAN_Protein_Ctrl = ggplot() +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_HUMAN_Protein_Ctrl_Norm = ggplot() +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(tCtrl_Norm, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl_Norm", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl_Norm + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_HUMAN_Protein_Ctrl_Norm_Second = ggplot() +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl_Norm_Second", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl_Norm_Second + scale_x_continuous(breaks = seq(1, 25, by = 1))
# Global and Maxima Detection (need to add threshold in if function)
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i] > input[i+1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Data Frames with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis
maxnum_plot = function(input, row){
if (input == maxnum_Ctrl_0.1){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
if (input == maxnum_RNase_0.1){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
}
# Function only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
# Although error pops out, it still works ¯\-.-/¯
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
if (input == maxnum_RNase_0.1){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
}
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
}
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
# Global and Maxima Detection (need to add threshold in if function)
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i] > input[i+1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Data Frames with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, xlab="Threshold", ylab="Maxima Number", type="l")
}
}
# Function only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
# Although error pops out, it still works ¯\-.-/¯
length(unique(maxnum_Ctrl_0.1))
length(unique(maxnum_RNase_0.1))
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
}
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "RNase Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
}
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "RNase Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
else{print("Invalid Input")}
}
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
maxnum_plot(maxnum_RNase_0.2, 10)
# Global and Maxima Detection (need to add threshold in if function)
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i] > input[i+1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Data Frames with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
else if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "RNase Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
else{print("Invalid Input")}
}
# Function only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
maxnum_plot(maxnum_RNase_0.2, 10)
maxnum_Ctrl_0.2[10]
maxnum_Ctrl_0.1[10]
maxnum_Ctrl_0.6[10]
maxnum_Ctrl_0.4[10]
maxnum_Ctrl_0.2[10]
view(maxnum_Ctrl_0.6)
view(maxnum_RNase_0.6)
maxnum_RNase_0.6[10]
maxnum_RNase_0.7[10]
maxnum_RNase_0.8[10]
maxnum_RNase_0.9[10]
# Global and Maxima Detection (need to add threshold in if function)
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i] > input[i+1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_Norm, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Data Frames with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis
maxnum_plot = function(input, row){
if (length(unique(input)) == length(unique(maxnum_Ctrl_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "Ctrl Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
else if (length(unique(input)) == length(unique(maxnum_RNase_0.1))){
output = 0
output[1] = input[row]
for (i in seq(0.2,0.9,0.1)){
output[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1), output, main = "RNase Protein", xlab="Threshold", ylab="Maxima Number", type="l")
}
else{print("Invalid Input")}
}
# Function only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
maxnum_plot(maxnum_Ctrl_0.1, 10)
maxnum_plot(maxnum_RNase_0.1, 10)
