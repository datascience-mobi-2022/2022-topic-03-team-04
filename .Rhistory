#creating the new df
new_df_combi<- as.data.frame(matrix(nrow = (dim(input)[1]), ncol = dim(input)[2]))
rownames(new_df_combi) <- rownames(Data_Norm_Ctrl)
colnames(new_df_combi) <- colnames(Data_Norm_RNase)
r<- 1   #r are the rows
while(r<=dim(input)[1]) {
for (c in 1:dim(input)[2]) {    #c are the columns
rep1 <- input[r,c]
rep2 <- input[r+1,c]
rep3 <- input[r+2,c]
if( (abs(rep1-rep2)<abs(rep1-rep3)) && (abs(rep1-rep2)<abs(rep2-rep3)) ) {
mean <- mean(c(rep1,rep2))
new_df_combi[r,(c)] <- mean
new_df_combi[r+1,(c)] <- rep1
new_df_combi[r+2,(c)] <- rep2
}
else if( (abs(rep1-rep3)<abs(rep1-rep2)) && (abs(rep1-rep3)<abs(rep2-rep3)) ) {
mean <- mean(c(rep1,rep3))
new_df_combi[r,(c)] <- mean
new_df_combi[r+1,(c)] <- rep1
new_df_combi[r+2,(c)] <- rep3
}
else {
mean <- mean(c(rep2,rep3))
new_df_combi[r,(c)] <- mean
new_df_combi[r+1,(c)] <- rep2
new_df_combi[r+2,(c)] <- rep3
}
}
r <- r + 3
}
#new_df_combi = new_df_combi[-dim(new_df_combi)[1],]
return(new_df_combi)
}
Ctrl_combi_df = df_combi_function(Data_Norm_Ctrl)
RNase_combi_df = df_combi_function(Data_Norm_RNase)
Ctrl_combi_df
tCtrl_combi_df = as.data.frame(t(Ctrl_combi_df))
tRNase_combi_df = as.data.frame(t(RNase_combi_df))
# Changed: rows of last 3 loops and adds # to row 462
Fractions = c(1:25)
MICA_HUMAN_Protein_Ctrl = ggplot() +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(Ctrl, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl + scale_x_continuous(breaks = seq(1, 25, by = 1))
MICA_HUMAN_Protein_Ctrl_Norm_Second = ggplot() +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_1")),  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_2")),  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_3")),  aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_Ctrl_Norm_Second", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl_Norm_Second + scale_x_continuous(breaks = seq(1, 25, by = 1))
#By Madleen
MICA_HUMAN_Protein_Ctrl_Norm_Second = ggplot() +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_1")), lwd=0.2,  aes(x = Fractions, y = MICA_HUMAN_Rep_1, color= 'Ctrl_Rep1')) +
theme(panel.background = element_rect(fill='white', colour='black'))+
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(size = 0.5, linetype = "solid", colour = "black"))+
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_2")), lwd=0.2,  aes(x = Fractions, y = MICA_HUMAN_Rep_2 , color= 'Ctrl_Rep2')) +
geom_line(data = select(tCtrl_combi_df, contains("MICA_HUMAN_Rep_3")), lwd=0.2,   aes(x = Fractions, y = MICA_HUMAN_Rep_3 , color= 'Ctrl_Rep3')) +
scale_colour_manual(name="legend",values=c(Ctrl_Rep1="blue2",Ctrl_Rep2="purple4", Ctrl_Rep3="magenta1")) +
labs(title="MICA_HUMAN_RNase_Norm_second", y= "Protein Amount")
MICA_HUMAN_Protein_Ctrl_Norm_Second + scale_x_continuous(breaks = seq(1, 25, by = 1))
# Global and Maxima Detection (need to add threshold in if function)
maximafunction = function(input, threshold){
output = 0
for (i in 1:(length(input))){
# 1st Fraction
if (i == 1){
if(input[i] > input[i+1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_combi_df, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_combi_df, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Vectors with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis (only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
# Richard's code with a couple embellishments by Madleen
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
# Function to get list with only local maxima (the local maxima of all 3 reps are combined in Rep1. Rep2 and Rep3 are useless)
localmax = function(input){
temp = list()
for (i in 1:dim(input)[2]){
v = input[,i]
v = v[v < max(v)]
temp[[i]] = v[which(v!=0)]
}
newtemp = list()
j = 1
while(j<length(temp)){
newtemp[[j]] = c(temp[[j]],temp[[j+1]],temp[[j+2]])
if(length(newtemp[[j]]) == 0){
newtemp[[j]] = NA
}
j=j+3
}
# 2 dummy zeros for the last 2 elements of the list so numbers of elements are still 11040 and can use colnames from other variable without problem
newtemp[[length(input)-1]] = 0
newtemp[[length(input)]] = 0
names(newtemp) = colnames(input)
return(newtemp)
}
# List of local maxima of all threshold
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("local_maxima_Ctrl",i,sep="_")
temp2 = paste("maxima_Ctrl",i,sep="_")
temp3 = localmax(get(temp2))
assign(temp1, temp3)
} # Result: local_maxima_Ctrl_i
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("local_maxima_RNase",i,sep="_")
temp2 = paste("maxima_RNase",i,sep="_")
temp3 = localmax(get(temp2))
assign(temp1, temp3)
} # Result: local_maxima_RNase_i
# Function to make data frame where absolute maxima of 3 Reps of a protein are inserted in a column
abmax = function(input){
output = data.frame()
i = 1
j = 0
while (i < dim(input)[2]){
rep1 = max(input[,i])
rep2 = max(input[,i+1])
rep3 = max(input[,i+2])
output[1:3,i-j] = c(rep1, rep2, rep3)
colnames(output)[i-j] = gsub("_Rep_1", "", colnames(input)[i])
i = i + 3
j = j + 2
}
rownames(output) = c("Rep1", "Rep2","Rep3")
return(output)
}
abmax_Ctrl = abmax(maxima_Ctrl_0.4)
abmax_RNase = abmax(maxima_RNase_0.4)
# T-Test comparing each corresponding Protein Rep of Ctrl and RNase with Bonferroni Correction
ttest = function(input1, input2, alpha){
output = data.frame()
for (i in 1:dim(input1)[2]){
p = t.test(input1[,i], input2[,i], var.equal = FALSE)$p.value
output[i,1] = p < alpha
}
rownames(output) = colnames(input1)
colnames(output) = "RNA Dependency"
return(output)
}
test = ttest(abmax_Ctrl, abmax_RNase, 0.05/dim(abmax_Ctrl)[2])
test[which(is.na(test[,1])),1] = FALSE
length(which(test == TRUE))
test
# Y Shift
y_shift = apply(abmax_Ctrl - abmax_RNase, 2, mean)
# X Shift
rowmax_Ctrl = apply(maxima_Ctrl_0.4, 2, which.max)
rowmax_RNase = apply(maxima_RNase_0.4, 2, which.max)
meanrowmax = function(input){
output = 0
i = 1
j = 0
while (i < length(input)){
output[i-j] = (input[i]+input[i+1]+input[i+2])/3
names(output)[i-j] = gsub("_Rep_1", "", names(input)[i])
i = i + 3
j = j + 2
}
return(output)
}
x_shift = meanrowmax(rowmax_Ctrl) - meanrowmax(rowmax_RNase)
# Combine Y-Shift and X-Shift in a Data Frame
pxy = data.frame(X_Shift = x_shift, Y_Shift = y_shift)
# Elbow Method
wss = sapply(2:8,function(x){
kmeans(pxy, x, 100)$tot.withinss
})
plot(2:8,wss,type='l',xlab="Number of Clusters", ylab="Total within-clusters Sum of Squares")
# Plotting the Clusters
## By Madleen
km = kmeans(pxy, centers = 3, nstart = 100, iter.max = 100)
fviz_cluster(km, data = pxy, geom = c("point"), main = "K Means Clustering with 3 Clusters")+
theme(panel.background = element_rect(fill='white', colour='black'))+
scale_colour_manual(values = c("skyblue", "orange", "red")) +
scale_fill_manual(values = c("white", "white", "white"))+
scale_shape_manual(values=c(19,15,17))
# Comparing RNA Dependency from both T Test and K Means
compare = pxy
compare[,3] = test
compare$Cluster = km$cluster
match = integer(dim(compare)[1])
names(match) = row.names(compare)
# 3 If's are made because the RNA dependent cluster's number is different every time the kmeans function runs. The number of Proteins that is categorized in the RNA dependent cluster are still the same (63).
if(length(which(compare[,4] == 1)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == TRUE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
if(length(which(compare[,4] == 2)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == FALSE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == TRUE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
if(length(which(compare[,4] == 3)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == FALSE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == TRUE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
# Protein that is RNA dependent according to T Test and K Means Clustering (2 Criteria must be fulfilled ). A value 1 in "match" means that the Results from T-Test and K-Means are the same.
row_rnadep_2 = c()
for (i in 1:length(match)){
if(match[i] == test[i,1]){
row_rnadep_2 = append(row_rnadep_2, i)
}
}
length(row_rnadep_2)
# Protein that is RNA dependent according to T Test and K Means Clustering (only 1 of the 2 Criteria must be satisfied). A value 1 in "match" means that the Results from T-Test and K-Means are the same.
rnacluster = 0
if(length(which(compare[,4] == 1)) == 63){
rnacluster = 1
}
if(length(which(compare[,4] == 2)) == 63){
rnacluster = 2
}
if(length(which(compare[,4] == 3)) == 63){
rnacluster = 3
}
row_rnadep_1 = unique(sort(c(which(compare[,4] == rnacluster), which(test == TRUE))))
length(row_rnadep_1)
# Function to get which row/column of Proteins INCLUDING REPS
whichrow = function(input){
output = c()
for (i in 1:length(input)){
output = append(output, (input[i]*3)-2)
output = append(output, (input[i]*3)-1)
output = append(output, input[i]*3)
}
return(output)
}
# Data Frames for each RNA dependent and independent proteins (Both Conditions Fulfilled)
Ctrl_Dependent_2 = tCtrl_combi_df[,whichrow(row_rnadep_2)]
Ctrl_Independent_2 = tCtrl_combi_df[,-whichrow(row_rnadep_2)]
RNase_Dependent_2 = tRNase_combi_df[,whichrow(row_rnadep_2)]
RNase_Independent_2 = tRNase_combi_df[,-whichrow(row_rnadep_2)]
Ctrl_Dependent_Abmax_2 = abmax_Ctrl[,row_rnadep_2]
Ctrl_Independent_Abmax_2 = abmax_Ctrl[,-row_rnadep_2]
RNase_Dependent_Abmax_2 = abmax_RNase[,row_rnadep_2]
RNase_Independent_Abmax_2 = abmax_RNase[,-row_rnadep_2]
Ctrl_Dependent_Allmax_2 = maxima_Ctrl_0.4[,whichrow(row_rnadep_2)]
Ctrl_Independent_Allmax_2 = maxima_Ctrl_0.4[,-whichrow(row_rnadep_2)]
RNase_Dependent_Allmax_2 = maxima_RNase_0.4[,whichrow(row_rnadep_2)]
RNase_Independent_Allmax_2 = maxima_RNase_0.4[,-whichrow(row_rnadep_2)]
# Data Frames for each RNA dependent and independent proteins (Either Conditions Fulfilled)
Ctrl_Dependent_1 = tCtrl_combi_df[,whichrow(row_rnadep_1)]
Ctrl_Independent_1 = tCtrl_combi_df[,-whichrow(row_rnadep_1)]
RNase_Dependent_1 = tRNase_combi_df[,whichrow(row_rnadep_1)]
RNase_Independent_1 = tRNase_combi_df[,-whichrow(row_rnadep_1)]
Ctrl_Dependent_Abmax_1 = abmax_Ctrl[,row_rnadep_1]
Ctrl_Independent_Abmax_1 = abmax_Ctrl[,-row_rnadep_1]
RNase_Dependent_Abmax_1 = abmax_RNase[,row_rnadep_1]
RNase_Independent_Abmax_1 = abmax_RNase[,-row_rnadep_1]
Ctrl_Dependent_Allmax_1 = maxima_Ctrl_0.4[,whichrow(row_rnadep_1)]
Ctrl_Independent_Allmax_1 = maxima_Ctrl_0.4[,-whichrow(row_rnadep_1)]
RNase_Dependent_Allmax_1 = maxima_RNase_0.4[,whichrow(row_rnadep_1)]
RNase_Independent_Allmax_1 = maxima_RNase_0.4[,-whichrow(row_rnadep_1)]
# Protein names and number of times listed as RBP from data bank is taken and put into new data frame
Data.RBPResearch <- read.table("C:/Users/Archid Knighton/Documents/GitHub/2022-topic-03-team-04/table_RBP_lists.csv", header=F, sep = ",")
# Protein names and number of times listed as RBP from data bank is taken and put into new data frame
#
Data.RBPResearch <- read.table("~/Desktop/2022-topic-03-team-04/RDeeP_A549_NS.csv", header=TRUE, row.names=1, sep = ";")
databank = data.frame(matrix(nrow=5004, ncol=2))
i=31
j=1
while (i<dim(Data.RBPResearch)[1]){
databank[((i-(24*j))/7*j),1] = Data.RBPResearch[i,1]
databank[((i-(24*j))/7*j),2] = Data.RBPResearch[i+3,1]
j= j +1
i = i+24
}
temp_name = databank[,1]
databank = as.integer(databank[,2])
names(databank) = temp_name
# Take only proteins that are at least one time identified as RBP from databank
databank_value = databank[-which(databank == 0)]
# Check how many RNA dependent proteins (2 conditions fulfilled) that are identified through our code and from data bank
temporary_2 = colnames(Ctrl_Dependent_Abmax_2)
temporary_2 = append(temporary_2, numeric(length(databank_value - length(temporary_2))))
RDeep_2 = intersect(names(databank_value), temporary_2)
length(RDeep_2)
# Check how many RNA dependent proteins (either condition fulfilled) that are identified through our code and from data bank
temporary_1 = colnames(Ctrl_Dependent_Abmax_1)
temporary_1 = append(temporary_1, numeric(length(databank_value - length(temporary_1))))
RDeep_1 = intersect(names(databank_value), temporary_1)
length(RDeep_1)
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
png(file="~/Desktop/2022-topic-03-team-04/number.of.maxima.of.all.thresholds.png",
width=600, height=350)
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
png(file="~/Desktop/2022-topic-03-team-04/kmeans.png",
width=600, height=350)
km = kmeans(pxy, centers = 3, nstart = 100, iter.max = 100)
fviz_cluster(km, data = pxy, geom = c("point"), main = "K Means Clustering with 3 Clusters")+
theme(panel.background = element_rect(fill='white', colour='black'))+
scale_colour_manual(values = c("skyblue", "orange", "red")) +
scale_fill_manual(values = c("white", "white", "white"))+
scale_shape_manual(values=c(19,15,17))
png(file="~/Desktop/2022-topic-03-team-04/kmeans.png",
width=600, height=350)
wss = sapply(2:8,function(x){
kmeans(pxy, x, 100)$tot.withinss
})
plot(2:8,wss,type='l',xlab="Number of Clusters", ylab="Total within-clusters Sum of Squares")
