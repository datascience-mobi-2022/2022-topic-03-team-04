else{
output[i] = 0}
}
# 2nd-24th Fraction
if (i > 1 && i < length(input)){
if(input[i] > input[i+1] && input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]}
else{
output[i] = 0}
}
# 25th Fraction
if (i == length(input)){
if(input[i] > input[i-1] && input[i] >= threshold*max(input)){
output[i] = input[i]
}
else{
output[i] = 0}
}
}
return(output)
}
# A Vector for Fraction's Names
fractionnames = 0
for (i in 1:25) {
fractionnames[i] = paste("Fraction",i,sep="_")
}
# Creating Maxima Data Frames with different Threshold
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_Ctrl",i,sep="_")
assign(temp, data.frame(apply(tCtrl_combi_df, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp = paste("maxima_RNase",i,sep="_")
assign(temp, data.frame(apply(tRNase_combi_df, 2, function(x){maximafunction(x,i)}), row.names = fractionnames))
} # Output: maxima_RNase_i (0.1 <= i <= 0.9)
# Function to get numbers of maxima
maximanumber = function(input){
output = 0
temp = 0
for (i in 1:length(input)){
if (input[i] != 0){
temp[i] = 1}
else{
temp[i] = 0}
}
output = sum(temp)
return(output)
}
# Creating Vectors with numbers of Maxima
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_Ctrl",i,sep="_")
temp2 = get(paste("maxima_Ctrl",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_Ctrl_i (0.1 <= i <= 0.9)
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("maxnum_RNase",i,sep="_")
temp2 = get(paste("maxima_RNase",i,sep="_"))
assign(temp1, apply(temp2, 2, maximanumber))
} # Output: maxnum_RNase_i (0.1 <= i <= 0.9)
# Function to plot random protein with threshold in x-axis and number of maxima in y-axis (only correctly works with input either maxnum_Ctrl_0.1 or "maxnum_RNase_0.1", nonetheless with any desired rows
maxnum_plot_col = function(){
row = sample(1:length(maxnum_Ctrl_0.1),1)
output1 = 0
output1[1] = maxnum_Ctrl_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output1[i*10] = get(paste(gsub("_0.*","","maxnum_Ctrl"),i,sep="_"))[row]
}
output2 = 0
output2[1] = maxnum_RNase_0.1[row]
for (i in seq(0.2,0.9,0.1)){
output2[i*10] = get(paste(gsub("_0.*","","maxnum_RNase"),i,sep="_"))[row]
}
# Visualization
plot(seq(0.1,0.9,0.1),col = "red",output1, main = names(maxnum_Ctrl_0.1)[row], xlab="Threshold", ylab="Maxima Number", type="l", lwd=5)
lines(seq(0.1,0.9,0.1),col = "blue",output2, type="l", lwd=5)
legend("topright", legend = c("Ctrl", "RNase"), col = c("red", "blue"), lwd = c(5,5), cex = 0.75)
}
maxnum_plot_col()
# Function to get list with only local maxima (the local maxima of all 3 reps are combined in Rep1. Rep2 and Rep3 are useless)
localmax = function(input){
temp = list()
for (i in 1:dim(input)[2]){
v = input[,i]
v = v[v < max(v)]
temp[[i]] = v[which(v!=0)]
}
newtemp = list()
j = 1
while(j<length(temp)){
newtemp[[j]] = c(temp[[j]],temp[[j+1]],temp[[j+2]])
if(length(newtemp[[j]]) == 0){
newtemp[[j]] = NA
}
j=j+3
}
# 2 dummy zeros for the last 2 elements of the list so numbers of elements are still 11040 and can use colnames from other variable without problem
newtemp[[length(input)-1]] = 0
newtemp[[length(input)]] = 0
names(newtemp) = colnames(input)
return(newtemp)
}
# List of local maxima of all threshold
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("local_maxima_Ctrl",i,sep="_")
temp2 = paste("maxima_Ctrl",i,sep="_")
temp3 = localmax(get(temp2))
assign(temp1, temp3)
} # Result: local_maxima_Ctrl_i
for (i in seq(0.1,0.9,0.1)){
temp1 = paste("local_maxima_RNase",i,sep="_")
temp2 = paste("maxima_RNase",i,sep="_")
temp3 = localmax(get(temp2))
assign(temp1, temp3)
} # Result: local_maxima_RNase_i
# Function to make data frame where absolute maxima of 3 Reps of a protein are inserted in a column
abmax = function(input){
output = data.frame()
i = 1
j = 0
while (i < dim(input)[2]){
rep1 = max(input[,i])
rep2 = max(input[,i+1])
rep3 = max(input[,i+2])
output[1:3,i-j] = c(rep1, rep2, rep3)
colnames(output)[i-j] = gsub("_Rep_1", "", colnames(input)[i])
i = i + 3
j = j + 2
}
rownames(output) = c("Rep1", "Rep2","Rep3")
return(output)
}
abmax_Ctrl = abmax(maxima_Ctrl_0.4)
abmax_RNase = abmax(maxima_RNase_0.4)
# T-Test comparing each corresponding Protein Rep of Ctrl and RNase with Bonferroni Correction
ttest = function(input1, input2, alpha){
output = data.frame()
for (i in 1:dim(input1)[2]){
p = t.test(input1[,i], input2[,i], var.equal = FALSE)$p.value
output[i,1] = p < alpha
}
rownames(output) = colnames(input1)
colnames(output) = "RNA Dependency"
return(output)
}
test = ttest(abmax_Ctrl, abmax_RNase, 0.05/dim(abmax_Ctrl)[2])
test[which(is.na(test[,1])),1] = FALSE
length(which(test == TRUE))
test
# Y Shift
y_shift = apply(abmax_Ctrl - abmax_RNase, 2, mean)
# X Shift
rowmax_Ctrl = apply(maxima_Ctrl_0.4, 2, which.max)
rowmax_RNase = apply(maxima_RNase_0.4, 2, which.max)
meanrowmax = function(input){
output = 0
i = 1
j = 0
while (i < length(input)){
output[i-j] = (input[i]+input[i+1]+input[i+2])/3
names(output)[i-j] = gsub("_Rep_1", "", names(input)[i])
i = i + 3
j = j + 2
}
return(output)
}
x_shift = meanrowmax(rowmax_Ctrl) - meanrowmax(rowmax_RNase)
# Combine Y-Shift and X-Shift in a Data Frame
pxy = data.frame(X_Shift = x_shift, Y_Shift = y_shift)
# Elbow Method
wss = sapply(2:8,function(x){
kmeans(pxy, x, 100)$tot.withinss
})
plot(2:8,wss,type='l',xlab="Number of Clusters", ylab="Total within-clusters Sum of Squares", col="red", main="Elbow Method")
# Plotting the Clusters
km = kmeans(pxy, centers = 3, nstart = 100, iter.max = 100)
fviz_cluster(km, data = pxy, geom = c("point"), main = "K Means Clustering with 3 Clusters")+
theme(panel.background = element_rect(fill='white', colour='black'))+
scale_colour_manual(values = c("skyblue", "orange", "red")) +
scale_fill_manual(values = c("white", "white", "white"))+
scale_shape_manual(values=c(19,15,17))
# Comparing RNA Dependency from both T Test and K Means
compare = pxy
compare[,3] = test
compare$Cluster = km$cluster
match = integer(dim(compare)[1])
names(match) = row.names(compare)
# 3 If's are made because the RNA dependent cluster's number is different every time the kmeans function runs. The number of Proteins that is categorized in the RNA dependent cluster are still the same (63).
if(length(which(compare[,4] == 1)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == TRUE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
if(length(which(compare[,4] == 2)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == FALSE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == TRUE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
if(length(which(compare[,4] == 3)) == 63){
for(x in 1:dim(compare)[1]){
if(compare[x,3] == FALSE && compare[x,4] == 1){
match[x] = TRUE
}
else if(compare[x,3] == FALSE && compare[x,4] == 2){
match[x] = TRUE
}
else if(compare[x,3] == TRUE && compare[x,4] == 3){
match[x] = TRUE
}
else{
match[x] = FALSE
}
}
}
# Protein that is RNA dependent according to T Test and K Means Clustering (2 Criteria must be fulfilled ). A value 1 in "match" means that the Results from T-Test and K-Means are the same.
row_rnadep_2 = c()
for (i in 1:length(match)){
if(match[i] == test[i,1]){
row_rnadep_2 = append(row_rnadep_2, i)
}
}
length(row_rnadep_2)
# Protein that is RNA dependent according to T Test and K Means Clustering (only 1 of the 2 Criteria must be satisfied). A value 1 in "match" means that the Results from T-Test and K-Means are the same.
rnacluster = 0
if(length(which(compare[,4] == 1)) == 63){
rnacluster = 1
}
if(length(which(compare[,4] == 2)) == 63){
rnacluster = 2
}
if(length(which(compare[,4] == 3)) == 63){
rnacluster = 3
}
row_rnadep_1 = unique(sort(c(which(compare[,4] == rnacluster), which(test == TRUE))))
length(row_rnadep_1)
# Function to get which row/column of Proteins INCLUDING REPS
whichrow = function(input){
output = c()
for (i in 1:length(input)){
output = append(output, (input[i]*3)-2)
output = append(output, (input[i]*3)-1)
output = append(output, input[i]*3)
}
return(output)
}
# Data Frames for each RNA dependent and independent proteins (Both Conditions Fulfilled)
Ctrl_Dependent_2 = tCtrl_combi_df[,whichrow(row_rnadep_2)]
Ctrl_Independent_2 = tCtrl_combi_df[,-whichrow(row_rnadep_2)]
RNase_Dependent_2 = tRNase_combi_df[,whichrow(row_rnadep_2)]
RNase_Independent_2 = tRNase_combi_df[,-whichrow(row_rnadep_2)]
Ctrl_Dependent_Abmax_2 = abmax_Ctrl[,row_rnadep_2]
Ctrl_Independent_Abmax_2 = abmax_Ctrl[,-row_rnadep_2]
RNase_Dependent_Abmax_2 = abmax_RNase[,row_rnadep_2]
RNase_Independent_Abmax_2 = abmax_RNase[,-row_rnadep_2]
Ctrl_Dependent_Allmax_2 = maxima_Ctrl_0.4[,whichrow(row_rnadep_2)]
Ctrl_Independent_Allmax_2 = maxima_Ctrl_0.4[,-whichrow(row_rnadep_2)]
RNase_Dependent_Allmax_2 = maxima_RNase_0.4[,whichrow(row_rnadep_2)]
RNase_Independent_Allmax_2 = maxima_RNase_0.4[,-whichrow(row_rnadep_2)]
# Data Frames for each RNA dependent and independent proteins (Either Conditions Fulfilled)
Ctrl_Dependent_1 = tCtrl_combi_df[,whichrow(row_rnadep_1)]
Ctrl_Independent_1 = tCtrl_combi_df[,-whichrow(row_rnadep_1)]
RNase_Dependent_1 = tRNase_combi_df[,whichrow(row_rnadep_1)]
RNase_Independent_1 = tRNase_combi_df[,-whichrow(row_rnadep_1)]
Ctrl_Dependent_Abmax_1 = abmax_Ctrl[,row_rnadep_1]
Ctrl_Independent_Abmax_1 = abmax_Ctrl[,-row_rnadep_1]
RNase_Dependent_Abmax_1 = abmax_RNase[,row_rnadep_1]
RNase_Independent_Abmax_1 = abmax_RNase[,-row_rnadep_1]
Ctrl_Dependent_Allmax_1 = maxima_Ctrl_0.4[,whichrow(row_rnadep_1)]
Ctrl_Independent_Allmax_1 = maxima_Ctrl_0.4[,-whichrow(row_rnadep_1)]
RNase_Dependent_Allmax_1 = maxima_RNase_0.4[,whichrow(row_rnadep_1)]
RNase_Independent_Allmax_1 = maxima_RNase_0.4[,-whichrow(row_rnadep_1)]
# Protein names and number of times listed as RBP from data bank is taken and put into new data frame
# ~/Desktop/2022-topic-03-team-04/table_RBP_lists.csv
Data.RBPResearch <- read.table("data/table_RBP_lists.csv", header=FALSE, sep = ",")
databank = data.frame(matrix(nrow=5004, ncol=2))
i=31
j=1
while (i<dim(Data.RBPResearch)[1]){
databank[((i-(24*j))/7*j),1] = Data.RBPResearch[i,1]
databank[((i-(24*j))/7*j),2] = Data.RBPResearch[i+3,1]
j= j +1
i = i+24
}
temp_name = databank[,1]
databank = as.integer(databank[,2])
names(databank) = temp_name
databank = databank[-which(duplicated(names(databank)))]
# Proteins that exist both in data bank and our data
included_protein = intersect(names(databank), colnames(abmax_Ctrl))
row_included_protein = c()
for (i in 1:length(included_protein)){
row_included_protein[i] = which(names(databank) == included_protein[i])
}
databank_adjusted = databank[row_included_protein] ## Proteins that will be checked
# Take only proteins that are at least one time identified from data bank
databank_value = databank_adjusted
# Check how many RNA dependent proteins (2 conditions fulfilled) that are identified through our code and from data bank
temporary_2 = colnames(Ctrl_Dependent_Abmax_2)
temporary_2 = append(temporary_2, numeric(length(databank_value - length(temporary_2))))
RDeep_2 = intersect(names(databank_value), temporary_2)
length(RDeep_2)
# Check how many RNA dependent proteins (either condition fulfilled) that are identified through our code and from data bank
temporary_1 = colnames(Ctrl_Dependent_Abmax_1)
temporary_1 = append(temporary_1, numeric(length(databank_value - length(temporary_1))))
RDeep_1 = intersect(names(databank_value), temporary_1)
length(RDeep_1)
# Check how many RNA dependent proteins were not identified
row_notrnadep_1 = setdiff(1:3680, row_rnadep_1)
NotRDeep_1 = rownames(test)[row_notrnadep_1]
Not_identified_RDeep_1 = intersect(names(databank_value), NotRDeep_1)
length(Not_identified_RDeep_1)
# Check how many RNA-dependent proteins could have been found by comparing the total protein names with the protein names in the databank
Total_RDeep = intersect(names(databank_value), colnames(abmax_Ctrl))
length(Total_RDeep)
# T-Test function for local maxima
localtest = function(input1, input2){
i = 1
j = 0
p = c()
output = c()
while(i < length(input1)){
# if NA or only one local maxima exists, it is impossible to do T-Test because there is no standard deviation
if(all(is.na(input1[[i]])) || all(is.na(input2[[i]])) || length(input1[[i]])<2 || length(input2[[i]])<2){
p[i-j] = NA
i = i+3
j = j+2
}
else{
p[i-j] = t.test(input1[[i]], input2[[i]], var.equal = F)$p.value
i = i+3
j = j+2
}
}
# Bonferonni Correction
output = p < 0.05/(length(p)-length(which(is.na(p))))
# Dummy NA for last proteins with no result from t-test. R somehow remove all last NA.
if(length(output) != length(colnames(abmax_Ctrl))){
output = append(output, rep(NA, length(colnames(abmax_Ctrl)) - length(output)))
}
names(output) = colnames(abmax_Ctrl)
output = as.data.frame(output)
return(output)
}
# T Test results from different threshold
for (i in seq(0.1, 0.9, 0.1)){
temp1 = paste("local_maxima_Ctrl",i,sep="_")
temp2 = paste("local_maxima_RNase",i,sep="_")
temp3 = paste("test",i,sep="_")
assign(temp3, localtest(get(temp1), get(temp2)))
} # Result: test_i
# Check which threshold identifies the most RNA dependent proteins
true_num = c()
for (i in seq(0.1, 0.9, 0.1)){
temp = get(paste("test",i,sep="_"))
true_num[i*10] = length(which(temp[,1] != 0))
}
names(true_num) = c(seq(0.1, 0.9, 0.1))
which.max(true_num)
local_maxima_Rdeep = rownames(test_0.4)[which(test_0.4 == TRUE)]
length(local_maxima_Rdeep)
# Check how many RNA dependent proteins (either of the 3 conditions fulfilled) are identified
dependent_3 = colnames(Ctrl_Dependent_Abmax_1)
dependent_3 = unique(sort(append(dependent_3, local_maxima_Rdeep)))
length(dependent_3)
# Check how many RNA dependent proteins (either of the 3 conditions fulfilled)  are identified through our code and from data bank
RDeep_3 = intersect(names(databank_value), dependent_3)
length(RDeep_3) # true positive
# Find which rows of the proteins fulfill either of the 3 conditions
row_rnadep_3 = row_rnadep_1
row_rnadep_3 = unique(sort(append(row_rnadep_3, which(test_0.4 == TRUE))))
# Find which proteins doesn't fulfill either of the 3 conditions
row_notrnadep_3 = setdiff(1:3680, row_rnadep_3)
NotRDeep_3 = rownames(test_0.4)[row_notrnadep_3]
#
# Check how many RNA dependent proteins were not identified by the third criteria
Not_identified_RDeep_3 = intersect(names(databank_value), NotRDeep_3)
length(Not_identified_RDeep_3)
# Function to get the mean of 3 Reps
mean_rep = function(input){
output = data.frame(matrix(nrow=25, ncol=3680))
colnames(output) = colnames(abmax_Ctrl)
j = 0
i = 1
temp = 0
while (i<=dim(input)[2]){
temp = (input[,i] + input[,i+1] + input[,i+2])/3
output[,i-j] = temp
i = i+3
j = j+2
}
return(output)
}
Ctrl_mean = mean_rep(tRNase_combi_df)
RNase_mean = mean_rep(tCtrl_combi_df)
# Remove proteins that have constant value from Ctrl- and RNase_mean
const_row = which(sapply(1:dim(Ctrl_mean)[2], function(x){length(unique(Ctrl_mean[,x])) == 1})) # Only use from Ctrl because RNase have 1 constant protein and also the same in Ctrl
Ctrl_mean = Ctrl_mean[,-const_row]
RNase_mean = RNase_mean[,-const_row]
# Correlation between Ctrl and RNase Group
cor = c()
for (i in 1:dim(Ctrl_mean)[2]){
cor[i] = cor(Ctrl_mean[,i], RNase_mean[,i])
}
names(cor) = colnames(Ctrl_mean)
# Remove proteins that have constant value from Y-Shift
y_shift_no_const = y_shift[-const_row]
# Linear Regression between correlation (X Axis) and Y-Shift (Y Axis)
df_lm = data.frame(Y_Shift = y_shift_no_const, Correlation = cor)
train_df = df_lm[1:round(0.8*dim(df_lm)[1]),]
test_df = df_lm[(dim(train_df)[1]+1):dim(df_lm)[1],]
lm = lm(Y_Shift ~ Correlation, data = train_df)
summary(lm)
# Plot Linear Regression (Error is caused by logarithming negative values and can be ignored. Logarithming make visualization better)
ggplot(data = train_df, aes(x = Correlation, y = Y_Shift)) +
geom_point(color="skyblue") +
ggtitle("Linear Regression of Y-Shift") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic", hjust=(0.5))) +
scale_x_continuous(trans = "log10") +
scale_y_continuous(trans = "log10") +
geom_smooth(method="lm", color="red") +
theme(panel.background = element_rect(fill = "white", colour = "black"))
# Plot Residuals (by Madleen)
hist(lm$residuals, breaks = 20, col="violet", main="Histogram of Y Shift Residuals", xlab="Residuals")
qqnorm(lm$residuals, col="red", main="QQ Plot of Y Shift Residuals")
qqline(lm$residuals, col="blue")
# Linear Regression first Prerequisite (Correlation between residuals and x values is 0)
cor(train_df$Correlation, lm$residuals)
# Linear Regression second Prerequisite (Correlation between expected y and x values is 1)
cor(train_df$Correlation*lm$coefficients[2] + lm$coefficients[1], train_df$Correlation)
# Testing Linear Model
test_model <- predict.lm(lm, test_df)
# Plot actual value (x Axis) against predicted Value (y Axis)
compare_df = data.frame(actual_value = test_df$Y_Shift, predicted_value = test_model)
ggplot(data = compare_df, aes(x = actual_value, y = predicted_value)) +
ggtitle("Plot of Actual and Predicted Value of Y Shift") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic", hjust=(0.5))) +
geom_point(col="skyblue") +
geom_abline(intercept = 0, slope = 1, col="red") +
theme(panel.background = element_rect(fill = "white", colour = "black"))
# HS_RBPs is the new data bank (data frame)
# ~/Desktop/2022-topic-03-team-04/HS_RBPs.RData
load("data/HS_RBPs.RData")
# Find which protein in the new data bank is the same as our y shift
protein_same_rbp = sort(intersect(HS_RBPs$Entry_Name.x, names(y_shift)))
temp_row_y_shift = c()
temp_row_databank = c()
for (i in 1:length(protein_same_rbp)){
temp_row_y_shift[i] = which(protein_same_rbp[i] == names(y_shift))
}
for (i in 1:length(protein_same_rbp)){
temp_row_databank[i] = which(protein_same_rbp[i] == HS_RBPs$Entry_Name.x)
}
# Create data frame with y shift and data from data bank
df_lm_4 = data.frame(Y_Shift = y_shift[temp_row_y_shift], X_Shift = x_shift[temp_row_y_shift], RBP2GO_Score = HS_RBPs$RBP2GO_Score[temp_row_databank], Mass_kDa = HS_RBPs$Mass_kDa[temp_row_databank], Length_AA = HS_RBPs$Length_AA[temp_row_databank])
# Linear Regression
train_df_4 = df_lm_4[1:round(0.8*dim(df_lm_4)[1]),]
test_df_4 = df_lm_4[(dim(train_df_4)[1]+1):dim(df_lm_4)[1],]
lm_4 = lm(X_Shift ~ RBP2GO_Score , data = train_df_4)
summary(lm_4)
# Plot Linear Regression
ggplot(data = train_df_4, aes(x = RBP2GO_Score, y = X_Shift)) +
geom_point(color="skyblue") +
ggtitle("Linear Regression of X-Shift") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic", hjust=(0.5))) +
geom_smooth(method="lm", color="red") +
theme(panel.background = element_rect(fill = "white", colour = "black"))
# Plot Residuals (by Madleen)
hist(lm_4$residuals, breaks = 20, col="violet", main="Histogram of X Shift Residuals", xlab="Residuals")
qqnorm(lm_4$residuals, col="red", main="QQ Plot of X Shift Residuals")
qqline(lm_4$residuals, col="blue")
# Linear Regression first Prerequisite (Correlation between residuals and x values is 0)
cor(train_df_4$RBP2GO_Score, lm_4$residuals)
# Linear Regression second Prerequisite (Correlation between expected y and x values is 1)
cor(train_df_4$RBP2GO_Score*lm_4$coefficients[2] + lm_4$coefficients[1], train_df_4$RBP2GO_Score)
# Testing Linear Model
test_model_4 <- predict.lm(lm_4, test_df_4)
# Plot actual value (x Axis) against predicted Value (y Axis)
compare_df_4 = data.frame(actual_value = test_df_4$X_Shift, predicted_value = test_model_4)
ggplot(data = compare_df_4, aes(x = actual_value, y = predicted_value)) +
ggtitle("Plot of Actual and Predicted X Shift Value") +
theme(plot.title = element_text(color="black", size=14, face="bold.italic", hjust=(0.5))) +
geom_point(col="skyblue") +
geom_abline(intercept = 0, slope = 1, col="red") +
theme(panel.background = element_rect(fill = "white", colour = "black"))
library(dplyr) #for the select function
library(ggplot2)
library(factoextra) # plotting k means
mean_sums_Ctrl
Total_Protein_by_fractions_Ctrl
Total_Protein_by_fractions_Ctrl
Total_Protein_sums_Ctrl
